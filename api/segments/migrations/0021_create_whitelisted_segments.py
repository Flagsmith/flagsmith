# Generated by Django 3.2.24 on 2024-02-12 19:48
from django.apps.registry import Apps
from django.db import migrations, models
import django.db.models.deletion
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.conf import settings
from django.db import connection



def create_whitelisted_segments(apps: Apps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    model_class = apps.get_model("segments", "WhitelistedSegment")
    sql = f"""
    SELECT s.id
    FROM segments_segment s
    LEFT OUTER JOIN segments_segmentrule sr1 ON s.id = sr1.segment_id
    LEFT OUTER JOIN segments_segmentrule sr2 ON sr1.id = sr2.rule_id
    LEFT OUTER JOIN segments_condition sc ON sr2.id = sc.rule_id
    GROUP BY s.id
    HAVING COUNT(*) > {settings.SEGMENT_RULES_CONDITIONS_LIMIT}
    ORDER BY COUNT(*) DESC;
    """

    whitelisted_segments = []
    with connection.cursor() as cursor:
        cursor.execute(sql)
        results = cursor.fetchall()
        for result in results:
            segment_id = result[0]
            whitelisted_segments.append(model_class(segment_id=segment_id))

    model_class.objects.bulk_create(whitelisted_segments)


class Migration(migrations.Migration):

    dependencies = [
        ('segments', '0020_detach_segment_from_project_cascade_delete'),
    ]

    operations = [
        migrations.CreateModel(
            name='WhitelistedSegment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('segment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='whitelisted_segment', to='segments.segment')),
            ],
        ),
        migrations.RunPython(
            create_whitelisted_segments,
            reverse_code=migrations.RunPython.noop,
        )
    ]

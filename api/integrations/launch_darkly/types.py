# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2024-01-04T14:34:37+00:00

from __future__ import annotations

from typing import Any, Literal, Optional, TypedDict

from typing_extensions import NotRequired

ActionIdentifier = str


ActionSpecifier = str


class ApprovalSettings(TypedDict):
    required: bool
    bypassApprovalsForPendingChanges: bool
    minNumApprovals: int
    canReviewOwnRequest: bool
    canApplyDeclinedChanges: bool
    serviceKind: str
    serviceConfig: dict[str, Any]
    requiredApprovalTags: list[str]


class ClientSideAvailability(TypedDict):
    usingMobileKey: NotRequired[bool]
    usingEnvironmentId: NotRequired[bool]


class Defaults(TypedDict):
    onVariation: int
    offVariation: int


class ExperimentAllocationRep(TypedDict):
    defaultVariation: int
    canReshuffle: bool


class FlagConfigEvaluation(TypedDict):
    contextKinds: NotRequired[list[str]]


class FlagConfigMigrationSettingsRep(TypedDict):
    checkRatio: NotRequired[int]


class FlagMigrationSettingsRep(TypedDict):
    contextKind: NotRequired[str]
    stageCount: NotRequired[int]


class ForbiddenErrorRep(TypedDict):
    code: str
    message: str


class InvalidRequestErrorRep(TypedDict):
    code: str
    message: str


class Link(TypedDict):
    href: NotRequired[str]
    type: NotRequired[str]


class MaintainerTeam(TypedDict):
    key: str
    name: str
    _links: NotRequired[dict[str, Link]]


class MemberSummary(TypedDict):
    _links: dict[str, Link]
    _id: str
    firstName: NotRequired[str]
    lastName: NotRequired[str]
    role: str
    email: str


class MethodNotAllowedErrorRep(TypedDict):
    code: str
    message: str


class MetricEventDefaultRep(TypedDict):
    disabled: NotRequired[bool]
    value: NotRequired[float]


class Modification(TypedDict):
    date: NotRequired[str]


class NotFoundErrorRep(TypedDict):
    code: str
    message: str


Operator = str


class Prerequisite(TypedDict):
    key: str
    variation: int


class RateLimitedErrorRep(TypedDict):
    code: str
    message: str


SegmentId = str


class SegmentTarget(TypedDict):
    values: NotRequired[list[str]]
    contextKind: NotRequired[str]


class TagCollection(TypedDict):
    items: list[str]
    _links: dict[str, Link]
    totalCount: NotRequired[int]


class Target(TypedDict):
    values: list[str]
    variation: int
    contextKind: NotRequired[str]


class UnauthorizedErrorRep(TypedDict):
    code: str
    message: str


UnixMillis = int


class Variation(TypedDict):
    _id: NotRequired[str]
    value: Any
    description: NotRequired[str]
    name: NotRequired[str]


class VariationSummary(TypedDict):
    rules: int
    nullRules: int
    targets: int
    contextTargets: int
    isFallthrough: NotRequired[bool]
    isOff: NotRequired[bool]
    rollout: NotRequired[int]
    bucketBy: NotRequired[str]


class WeightedVariation(TypedDict):
    variation: int
    weight: int
    _untracked: NotRequired[bool]


class CustomProperty(TypedDict):
    name: str
    value: list[str]


class AccessAllowedReason(TypedDict):
    resources: NotRequired[list[str]]
    notResources: NotRequired[list[str]]
    actions: NotRequired[list[ActionSpecifier]]
    notActions: NotRequired[list[ActionSpecifier]]
    effect: Literal["allow", "deny"]
    role_name: NotRequired[str]


class AccessAllowedRep(TypedDict):
    action: ActionIdentifier
    reason: AccessAllowedReason


class AccessDeniedReason(TypedDict):
    resources: NotRequired[list[str]]
    notResources: NotRequired[list[str]]
    actions: NotRequired[list[ActionSpecifier]]
    notActions: NotRequired[list[ActionSpecifier]]
    effect: Literal["allow", "deny"]
    role_name: NotRequired[str]


AllVariationsSummary = Optional[dict[str, VariationSummary]]


class Clause(TypedDict):
    _id: NotRequired[str]
    attribute: str
    op: Operator
    values: list  # type: ignore[type-arg]
    contextKind: NotRequired[str]
    negate: bool


CustomProperties = Optional[dict[str, CustomProperty]]


class Environment(TypedDict):
    _links: dict[str, Link]
    _id: str
    key: str
    name: str
    apiKey: str
    mobileKey: str
    color: str
    defaultTtl: int
    secureMode: bool
    defaultTrackEvents: bool
    requireComments: bool
    confirmChanges: bool
    tags: list[str]
    approvalSettings: NotRequired[ApprovalSettings]
    critical: bool


class Environments(TypedDict):
    _links: NotRequired[dict[str, Link]]
    totalCount: NotRequired[int]
    items: list[Environment]


class ExperimentEnabledPeriodRep(TypedDict):
    startDate: NotRequired[UnixMillis]
    stopDate: NotRequired[UnixMillis]


class ExperimentEnvironmentSettingRep(TypedDict):
    startDate: NotRequired[UnixMillis]
    stopDate: NotRequired[UnixMillis]
    enabledPeriods: NotRequired[list[ExperimentEnabledPeriodRep]]


class FlagListingRep(TypedDict):
    name: str
    key: str
    _links: NotRequired[dict[str, Link]]
    _site: NotRequired[Link]


class FlagSummary(TypedDict):
    variations: AllVariationsSummary
    prerequisites: int


class Project(TypedDict):
    _links: dict[str, Link]
    _id: str
    key: str
    includeInSnippetByDefault: bool
    defaultClientSideAvailability: NotRequired[ClientSideAvailability]
    name: str
    tags: list[str]
    environments: NotRequired[Environments]


class Rollout(TypedDict):
    variations: list[WeightedVariation]
    experimentAllocation: NotRequired[ExperimentAllocationRep]
    seed: NotRequired[int]
    bucketBy: NotRequired[str]
    contextKind: NotRequired[str]


class Rule(TypedDict):
    _id: NotRequired[str]
    variation: NotRequired[int]
    rollout: NotRequired[Rollout]
    clauses: list[Clause]
    trackEvents: bool
    description: NotRequired[str]
    ref: NotRequired[str]


class SegmentMetadata(TypedDict):
    envId: NotRequired[str]
    segmentId: NotRequired[SegmentId]
    version: NotRequired[int]
    includedCount: NotRequired[int]
    excludedCount: NotRequired[int]
    lastModified: NotRequired[UnixMillis]
    deleted: NotRequired[bool]


class UserSegmentRule(TypedDict):
    _id: NotRequired[str]
    clauses: list[Clause]
    weight: NotRequired[int]
    rolloutContextKind: NotRequired[str]
    bucketBy: NotRequired[str]
    description: NotRequired[str]


class VariationOrRolloutRep(TypedDict):
    variation: NotRequired[int]
    rollout: NotRequired[Rollout]


class AccessDenied(TypedDict):
    action: ActionIdentifier
    reason: AccessDeniedReason


class Access(TypedDict):
    denied: list[AccessDenied]
    allowed: list[AccessAllowedRep]


class FeatureFlagConfig(TypedDict):
    on: bool
    archived: bool
    salt: str
    sel: str
    lastModified: UnixMillis
    version: int
    targets: NotRequired[list[Target]]
    contextTargets: NotRequired[list[Target]]
    rules: NotRequired[list[Rule]]
    fallthrough: NotRequired[VariationOrRolloutRep]
    offVariation: NotRequired[int]
    prerequisites: NotRequired[list[Prerequisite]]
    _site: Link
    _access: NotRequired[Access]
    _environmentName: str
    trackEvents: bool
    trackEventsFallthrough: bool
    _debugEventsUntilDate: NotRequired[UnixMillis]
    _summary: NotRequired[FlagSummary]
    evaluation: NotRequired[FlagConfigEvaluation]
    migrationSettings: NotRequired[FlagConfigMigrationSettingsRep]


class MetricListingRep(TypedDict):
    experimentCount: NotRequired[int]
    metricGroupCount: NotRequired[int]
    _id: str
    key: str
    name: str
    kind: Literal["pageview", "click", "custom"]
    _attachedFlagCount: NotRequired[int]
    _links: dict[str, Link]
    _site: NotRequired[Link]
    _access: NotRequired[Access]
    tags: list[str]
    _creationDate: UnixMillis
    lastModified: NotRequired[Modification]
    maintainerId: NotRequired[str]
    _maintainer: NotRequired[MemberSummary]
    description: NotRequired[str]
    isNumeric: NotRequired[bool]
    successCriteria: NotRequired[Literal["HigherThanBaseline", "LowerThanBaseline"]]
    unit: NotRequired[str]
    eventKey: NotRequired[str]
    randomizationUnits: NotRequired[list[str]]
    unitAggregationType: NotRequired[Literal["average", "sum"]]
    analysisType: NotRequired[Literal["mean", "percentile"]]
    percentileValue: NotRequired[int]
    eventDefault: NotRequired[MetricEventDefaultRep]


class UserSegment(TypedDict):
    name: str
    description: NotRequired[str]
    tags: list[str]
    creationDate: UnixMillis
    lastModifiedDate: UnixMillis
    key: str
    included: NotRequired[list[str]]
    excluded: NotRequired[list[str]]
    includedContexts: NotRequired[list[SegmentTarget]]
    excludedContexts: NotRequired[list[SegmentTarget]]
    _links: dict[str, Link]
    rules: list[UserSegmentRule]
    version: int
    deleted: bool
    _access: NotRequired[Access]
    _flags: NotRequired[list[FlagListingRep]]
    unbounded: NotRequired[bool]
    unboundedContextKind: NotRequired[str]
    generation: int
    _unboundedMetadata: NotRequired[SegmentMetadata]
    _external: NotRequired[str]
    _externalLink: NotRequired[str]
    _importInProgress: NotRequired[bool]


class UserSegments(TypedDict):
    items: list[UserSegment]
    _links: dict[str, Link]
    totalCount: int


class LegacyExperimentRep(TypedDict):
    metricKey: NotRequired[str]
    _metric: NotRequired[MetricListingRep]
    environments: NotRequired[list[str]]
    _environmentSettings: NotRequired[dict[str, ExperimentEnvironmentSettingRep]]


class ExperimentInfoRep(TypedDict):
    baselineIdx: int
    items: list[LegacyExperimentRep]


class FeatureFlag(TypedDict):
    name: str
    kind: Literal["boolean", "multivariate"]
    description: NotRequired[str]
    key: str
    _version: int
    creationDate: UnixMillis
    includeInSnippet: NotRequired[bool]
    clientSideAvailability: NotRequired[ClientSideAvailability]
    variations: list[Variation]
    temporary: bool
    tags: list[str]
    _links: dict[str, Link]
    maintainerId: NotRequired[str]
    _maintainer: NotRequired[MemberSummary]
    maintainerTeamKey: NotRequired[str]
    _maintainerTeam: NotRequired[MaintainerTeam]
    goalIds: NotRequired[list[str]]
    experiments: ExperimentInfoRep
    customProperties: CustomProperties
    archived: bool
    archivedDate: NotRequired[UnixMillis]
    deprecated: bool
    deprecatedDate: NotRequired[UnixMillis]
    defaults: NotRequired[Defaults]
    _purpose: NotRequired[str]
    migrationSettings: NotRequired[FlagMigrationSettingsRep]
    environments: dict[str, FeatureFlagConfig]


class FeatureFlags(TypedDict):
    items: list[FeatureFlag]
    _links: dict[str, Link]
    totalCount: NotRequired[int]
    totalCountWithDifferences: NotRequired[int]

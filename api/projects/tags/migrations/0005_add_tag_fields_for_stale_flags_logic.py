# Generated by Django 3.2.23 on 2023-12-06 15:11
import re

from django.apps.registry import Apps
from django.db import migrations, models
from django.db.backends.base.schema import BaseDatabaseSchemaEditor

from projects.tags.models import TagType

PROTECTED_LABELS = {"protected", "donotdelete", "permanent"}
LABEL_REGEX = re.compile(r"[ _]")


def get_sanitised_label(label: str) -> str:
    return LABEL_REGEX.sub("", label.lower())


def mark_existing_tags_as_permanent(
    apps: Apps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    """
    Update all tags in the database which the FE treats as 'permanent' through regex matching
    to have the new is_permanent label. The FE will subsequently be updated to use the
    is_permanent attribute instead of regex matching.
    """
    tag_class = apps.get_model("tags", "tag")

    to_update = []

    for tag in filter(
        lambda t: get_sanitised_label(t.label) in PROTECTED_LABELS,
        tag_class.objects.all(),
    ):
        tag.is_permanent = True
        to_update.append(tag)

    tag_class.objects.bulk_update(to_update, fields=["is_permanent"])


class Migration(migrations.Migration):
    dependencies = [
        ("tags", "0004_add_uuid_field"),
    ]

    operations = [
        migrations.AddField(
            model_name="tag",
            name="is_permanent",
            field=models.BooleanField(
                default=False,
                help_text="When applied to a feature, it means this feature should be excluded from stale flags logic.",
            ),
        ),
        migrations.AddField(
            model_name="tag",
            name="is_system_tag",
            field=models.BooleanField(
                default=False,
                help_text="Indicates that a tag was created by the system, not the user.",
            ),
        ),
        migrations.RunPython(
            mark_existing_tags_as_permanent, reverse_code=migrations.RunPython.noop
        ),
        migrations.AddField(
            model_name="tag",
            name="type",
            field=models.CharField(
                choices=[("NONE", "None"), ("STALE", "Stale")],
                help_text="Field used to provide a consistent identifier for the FE and API to use for business logic.",
                max_length=100,
                default="NONE",
            ),
        ),
    ]

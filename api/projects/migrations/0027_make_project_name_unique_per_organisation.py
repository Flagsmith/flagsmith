# Generated by Django 4.2.18 on 2025-01-24 11:29
from django.apps.registry import Apps
from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.models import Count


def handle_duplicate_project_name(
    apps: Apps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    Project = apps.get_model("projects", "Project")

    # Get all projects, grouped by organisation and name
    projects_grouped = (
        Project.objects.values("organisation", "name")
        .annotate(name_count=Count("name"))
        .filter(name_count__gt=1)
    )

    # Iterate over organisations that have duplicate project names
    for org in projects_grouped:
        # Get projects with the same name under the same organisation
        duplicate_projects = Project.objects.filter(
            name=org["name"], organisation=org["organisation"]
        )

        # Skip first project and rename remaining duplicates
        for i, project in enumerate(duplicate_projects[1:], start=1):
            project.name = f"{project.name} ({i})"
            project.save()


class Migration(migrations.Migration):

    dependencies = [
        ("organisations", "0058_update_audit_and_history_limits_in_sub_cache"),
        ("projects", "0026_add_change_request_approval_limit_to_projects"),
    ]

    operations = [
        migrations.RunPython(handle_duplicate_project_name, reverse_code=migrations.RunPython.noop),
        migrations.AlterUniqueTogether(
            name="project",
            unique_together={("name", "organisation")},
        ),
    ]

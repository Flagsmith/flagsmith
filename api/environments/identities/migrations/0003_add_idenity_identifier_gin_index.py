# Generated by Django 4.2.18 on 2025-04-22 10:15

from django.contrib.postgres.indexes import GinIndex
from django.contrib.postgres.operations import TrigramExtension
from django.db import migrations
import django.contrib.postgres.indexes
import django.db.models.functions.text

from core.migration_helpers import PostgresOnlyRunSQL


_create_index_sql = "CREATE INDEX CONCURRENTLY IF NOT EXISTS identity_identifier_idx ON environments_identity USING GIN (UPPER(identifier) gin_trgm_ops);"
_create_index_reverse_sql = (
    "DROP INDEX CONCURRENTLY IF EXISTS identity_identifier_idx;"
)


class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ("identities", "0002_alter_identity_index_together"),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AddIndex(
                    model_name="identity",
                    index=GinIndex(
                        django.contrib.postgres.indexes.OpClass(
                            django.db.models.functions.text.Upper("identifier"),
                            name="gin_trgm_ops",
                        ),
                        name="identity_identifier_idx",
                    ),
                ),
            ],
            database_operations=[
                TrigramExtension(),
                PostgresOnlyRunSQL(
                    sql=_create_index_sql,
                    reverse_sql=_create_index_reverse_sql,
                ),
            ],
        ),
    ]

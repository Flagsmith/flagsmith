# Generated by Django 3.2.20 on 2023-08-22 14:53

from django.db import migrations

from core.migration_helpers import PostgresOnlyRunSQL

current_index_constraint_name = "features_featuresegment_feature_id_environment_i_e5499ca3_uniq"
new_index_constraint_name = "features_featuresegment_feature_id_environment_i_f1fde686_uniq"

# `atomic = False` only seems to work if each migration.RunSQL argument is a single SQL
# statement. As such, we need to split the reverse code into 2 separate RunSQL operations.
_drop_constraint_sql = f"ALTER TABLE features_featuresegment DROP CONSTRAINT {current_index_constraint_name};"
_drop_constraint_reverse_sql_create_index = f"CREATE UNIQUE INDEX CONCURRENTLY {current_index_constraint_name} ON features_featuresegment USING btree (\"feature_id\", \"environment_id\", \"segment_id\", \"environment_feature_version_id\");"
_drop_constraint_reverse_sql_add_constraint = f"ALTER TABLE features_featuresegment ADD CONSTRAINT {current_index_constraint_name} UNIQUE USING INDEX {current_index_constraint_name};"

_create_index_sql = f"CREATE UNIQUE INDEX CONCURRENTLY {new_index_constraint_name} ON features_featuresegment USING btree (\"feature_id\", \"environment_id\", \"segment_id\", \"environment_feature_version_id\");"
_create_index_reverse_sql = migrations.RunSQL.noop

_add_constraint_sql = f"ALTER TABLE features_featuresegment ADD CONSTRAINT {new_index_constraint_name} UNIQUE USING INDEX {new_index_constraint_name};"
_add_constraint_reverse_sql = f"ALTER TABLE features_featuresegment DROP CONSTRAINT {new_index_constraint_name};"


class Migration(migrations.Migration):

    atomic = False

    dependencies = [
        ('environments', '0033_add_environment_feature_state_version_logic'),
        ('segments', '0019_add_audit_to_condition'),
        ('feature_versioning', '0001_add_environment_feature_state_version_logic'),
        ('features', '0061_add_environment_feature_state_version_logic'),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterUniqueTogether(
                    name="featuresegment",
                    unique_together={
                        ("feature", "environment", "segment", "environment_feature_version")
                    },
                ),
            ],
            database_operations=[
                PostgresOnlyRunSQL(_drop_constraint_sql, reverse_sql=_drop_constraint_reverse_sql_add_constraint),
                PostgresOnlyRunSQL(
                    migrations.RunSQL.noop, reverse_sql=_drop_constraint_reverse_sql_create_index
                ),
                PostgresOnlyRunSQL(_create_index_sql, reverse_sql=_create_index_reverse_sql),
                PostgresOnlyRunSQL(_add_constraint_sql, reverse_sql=_add_constraint_reverse_sql),
            ],
        )
    ]

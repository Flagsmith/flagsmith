# Generated by Django 2.2.24 on 2021-10-21 13:51

from django.db import migrations
from django.db.models import Max


def remove_duplicate_mv_feature_state_values(apps, schema_editor):  # type: ignore[no-untyped-def]
    MultivariateFeatureStateValue = apps.get_model(
        "multivariate", "MultivariateFeatureStateValue"
    )

    # This query essentially groups the MV feature state values by the feature state
    # and MV feature option, giving us the duplicates and annotates them with the max
    # id of that group of duplicates so we can exclude it later, obviously those that
    # are not duplicates will therefore be excluded because they will be annotated
    # with their own id.
    max_id_objects = MultivariateFeatureStateValue.objects.values(
        "feature_state", "multivariate_feature_option"
    ).annotate(max_id=Max("id"))

    max_ids = [obj["max_id"] for obj in max_id_objects]
    delete_qs = MultivariateFeatureStateValue.objects.exclude(id__in=max_ids)

    # Make sure we're not deleting anything that is NOT a duplicate
    # This will trigger a lot of queries depending on how many duplicates there are
    # but is definitely safer than deleting data that we shouldn't be
    for mv_fsv in delete_qs:
        assert (
            MultivariateFeatureStateValue.objects.exclude(id=mv_fsv.id)
            .filter(
                feature_state_id=mv_fsv.feature_state_id,
                multivariate_feature_option_id=mv_fsv.multivariate_feature_option_id,
            )
            .exists()
        )

    delete_qs.delete()


class Migration(migrations.Migration):

    dependencies = [
        ("multivariate", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(
            remove_duplicate_mv_feature_state_values, reverse_code=lambda *args: None
        ),
        migrations.AlterUniqueTogether(
            name="multivariatefeaturestatevalue",
            unique_together={("feature_state", "multivariate_feature_option")},
        ),
    ]
